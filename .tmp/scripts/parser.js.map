{"version":3,"sources":["parser.js"],"names":["parser","pItems","fromSrt","data","ms","useMs","replace","regex","split","shift","items","i","length","push","id","trim","startTime","timeMs","endTime","text","toSrt","Array","res","s","isNaN","msTime","parseInt","val","parts","exec","measures","time","toString","join","exports","module"],"mappings":"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","file":"parser.js","sourcesContent":["var parser = (function() {\n    var pItems = {};\n\n    /**\n     * Converts SubRip subtitles into array of objects\n     * [{\n     *     id:        `Number of subtitle`\n     *     startTime: `Start time of subtitle`\n     *     endTime:   `End time of subtitle\n     *     text: `Text of subtitle`\n     * }]\n     *\n     * @param  {String}  data SubRip suntitles string\n     * @param  {Boolean} ms   Optional: use milliseconds for startTime and endTime\n     * @return {Array}  \n     */\n    pItems.fromSrt = function(data, ms) {\n        var useMs = ms ? true : false;\n\n        data = data.replace(/\\r/g, '');\n        var regex = /(\\d+)\\n(\\d{2}:\\d{2}:\\d{2},\\d{3}) --> (\\d{2}:\\d{2}:\\d{2},\\d{3})/g;\n        data = data.split(regex);\n        data.shift();\n\n        var items = [];\n        for (var i = 0; i < data.length; i += 4) {\n            items.push({\n                id: data[i].trim(),\n                startTime: useMs ? timeMs(data[i + 1].trim()) : data[i + 1].trim(),\n                endTime: useMs ? timeMs(data[i + 2].trim()) : data[i + 2].trim(),\n                text: data[i + 3].trim()\n            });\n        }\n\n        return items;\n    };\n\n    /**\n     * Converts Array of objects created by this module to SubRip subtitles\n     * @param  {Array}  data\n     * @return {String}      SubRip subtitles string\n     */\n    pItems.toSrt = function(data) {\n        if (!data instanceof Array) return '';\n        var res = '';\n\n        for (var i = 0; i < data.length; i++) {\n            var s = data[i];\n\n            if (!isNaN(s.startTime) && !isNaN(s.endTime)) {\n                s.startTime = msTime(parseInt(s.startTime, 10));\n                s.endTime = msTime(parseInt(s.endTime, 10));\n            }\n\n            res += s.id + '\\r\\n';\n            res += s.startTime + ' --> ' + s.endTime + '\\r\\n';\n            res += s.text.replace('\\n', '\\r\\n') + '\\r\\n\\r\\n';\n        }\n\n        return res;\n    };\n\n    var timeMs = function(val) {\n        var regex = /(\\d+):(\\d{2}):(\\d{2}),(\\d{3})/;\n        var parts = regex.exec(val);\n\n        if (parts === null) {\n            return 0;\n        }\n\n        for (var i = 1; i < 5; i++) {\n            parts[i] = parseInt(parts[i], 10);\n            if (isNaN(parts[i])) parts[i] = 0;\n        }\n\n        // hours + minutes + seconds + ms\n        return parts[1] * 3600000 + parts[2] * 60000 + parts[3] * 1000 + parts[4];\n    };\n\n    var msTime = function(val) {\n        var measures = [ 3600000, 60000, 1000 ]; \n        var time = [];\n\n        for (var i in measures) {\n            var res = (val / measures[i] >> 0).toString();\n            \n            if (res.length < 2) res = '0' + res;\n            val %= measures[i];\n            time.push(res);\n        }\n\n        var ms = val.toString();\n        if (ms.length < 3) {\n            for (i = 0; i <= 3 - ms.length; i++) ms = '0' + ms;\n        }\n\n        return time.join(':') + ',' + ms;\n    };\n\n    return pItems;\n})();\n\n// ignore exports for browser\nif (typeof exports === 'object') {\n    module.exports = parser;\n}"]}